import os
import time
from tkinter import N
current_time = time.ctime()
class user: #main user class to store user information
    def __init__(self, username, password, games, balance, games_delivered = None, game_delivery_date = None, game_delivery_date_asc = None):
        self.username = username
        self.password = password
        self.games = games if games is not None else []
        self.balance = balance
        self.games_delivered = games_delivered if games_delivered is not None else []
        self.game_delivery_date = game_delivery_date if game_delivery_date is not None else {}
        self.game_delivery_date_asc = game_delivery_date_asc if game_delivery_date_asc is not None else []

    def view_bal(self):
        return self.balance

    def deposit(self, amount):
        self.balance += float(amount)

    def withdraw(self, amount):
        if self.balance >= amount:
            self.balance -= float(amount)
            return amount
        else:
            return "Insufficient funds"

    def add_game(self,game_list, game_key):
        if game_key in game_list:
            self.games.append(game_key)
            game_list[game_key].purchase()
        else:
            return "Invalid game key"
    def remove_game(self,game_key):
        if game_key in self.games:
            self.games.remove(game_key)
            print(f"Game removed: {game_key}")
        if game_key in self.game_delivery_date:
            self.game_delivery_date.pop(game_key)
            print(f"Game removed: {game_key}")
        if game_key in self.game_delivery_date_asc:
            self.game_delivery_date_asc.remove(game_key)
            print(f"Game removed: {game_key}")
        if game_key in self.games_delivered:
            self.games_delivered.remove(game_key)
            print(f"Game removed: {game_key}")
        else:
            print("Invalid game key")
def save_user(user_list): # self explanatory function used to save the user list to a text file
    with open('C:\\Users\\zacha\\OneDrive - Catholic Education Western Australia\\Computer Science\\Project 1 Repo\\computer-sci-project-1\\users', 'w') as file:
        for user in user_list.values():
            games_deliver = "|".join(user.games_delivered)
            game_deliver_date = " ".join(str(value) for value in user.game_delivery_date.values())
            games_keys = "|".join(user.games)
            games_delivery_date_asc = "|".join(user.game_delivery_date_asc) #in order to read values from file, split the list within the object dictionary by joining with "|"
            file.write(f"{user.username},{user.password},{games_keys},{user.balance},{games_deliver},{game_deliver_date},{games_delivery_date_asc}\n")
def make_userlist():
    user_list = {}
    try:
        with open('C:\\Users\\zacha\\OneDrive - Catholic Education Western Australia\\Computer Science\\Project 1 Repo\\computer-sci-project-1\\users', 'r') as user_file:
            for line in user_file:
                username, password, games_str, balance, games_delivered_str, game_delivery_date_str, game_delivery_asc_str = line.strip().split(',') #assigns each variable with a value
                games = games_str.split("|") if games_str else []
                games_delivered= games_delivered_str.split('|') if games_delivered_str else []
                game_delivery_date = game_delivery_date_str.split(' ') if game_delivery_date_str else [] #had to split it uniquely because time value is stored as float so no "." delimiter
                game_delivery_asc = game_delivery_asc_str.split('|') if game_delivery_asc_str else [] 
                game_delivery_date_dict = {}
                for i,timestamp in enumerate(game_delivery_date):
                    if i < len(game_delivery_date):
                        game_delivery_date_dict[game_delivery_asc[i]] = float(timestamp) #converts the list of dates to integers and assigns them to game_delivery_date with game_delivery_asc as the associating game id
                old_user = user(username, password, games, float(balance),games_delivered, game_delivery_date_dict, game_delivery_asc)
                user_list[username] = old_user #information is stored in a dictionary for better big O time complexity when searching for a key value pair
    except FileNotFoundError: #error handling if file is non existent
        print("No existing user found.")
    return user_list
def edit_user(user_list, username):
    while True:
        os.system('cls') #declutter the terminal (only works on windows, dont dare try to run this on mac or linux)
        print("\nUser Menu Options:")
        print("a. View balance")
        print("b. Deposit funds")
        print("c. Withdraw funds")
        print("d. Remove game ")
        print("e. Save & Quit")
        
        option = input("Select an option: ").lower().strip() #user input sanitization
        try:
            if option == 'a':
                print(f"Your balance is ${user_list[username].view_bal():.2f}") #:.2f limits float to 2 decimal places
                time.sleep(1)
            elif option == 'b':
                amount = float(input("Enter the amount to deposit: "))
                user_list[username].deposit(amount)
                print(f"You have successfully deposited ${amount}")
                time.sleep(1)
            elif option == 'c':
                amount = float(input("Enter the amount to withdraw: "))
                withdrawal = user_list[username].withdraw(amount)
                if withdrawal != "Insufficient funds":
                    print(f"You have withdrawn ${withdrawal:.2f}.")
                    time.sleep(1)
                else:
                    print(withdrawal)
                    time.sleep(1)
            elif option == 'd':
                game_key = input ("Enter the purchase key for the game you wish to remove (NO REFUNDS!)\n").strip()
                user_list[username].remove_game(game_key)
                time.sleep(1)
            elif option == 'e':
                save_user(user_list)
                print("User information saved.")
                time.sleep(1)
                break
            else:
                print("Invalid option. Please try again.")
        except ValueError: #error handling yipeeee
            print("Enter a valid option.")
def make_user(user_list):
    username = "" #kinda forgot to initialize user so i added this later lol
    user_exist = True
    while user_exist:
        username = input("Enter your username:\n").strip().lower() #more user input sanitization
        password = input("Enter your password:\n").strip().lower()
        if username in user_list:
            print('This user already exists. Try again.')
        else:
            user_exist = False
            new_user = user(username, password, [], 0, [], {})
            user_list[username] = new_user #again storing values in dictionary for better performance and reduction of time complexity
    return user_list, username
def validate_user(user_list):
    while True:
        is_new_user = input("Are you a current user? (y/n)\n").strip().lower()
        if is_new_user == 'y': 
            username = input("Enter Username:").strip().lower()
            password = input("Enter Password:").strip() #allows user to user any capitalization in password, only stripping spaces
            if username in user_list and user_list[username].password == password:
                    return True, username, user_list
            if username == 'admin' and password == 'admin':
                return "Admin", username, user_list
            else:
                print("Invalid username or password")
        elif is_new_user == 'n':
            user_list, username = make_user(user_list)
            return True, username, user_list
        else:
            print("Please enter 'y' or 'n'.")
def check_game_delivery(user_list, game_list, username): #variable checks for if game has been delivered
    for game_key in user_list[username].games[:]:
        if game_key in user_list[username].game_delivery_date:
            if time.time() > user_list[username].game_delivery_date[game_key]+(86400*5): #uses unix timestamp to check if 5 days have passed since ordered
                user_list[username].games.remove(game_key)
                user_list[username].game_delivery_date.pop(game_key)
                user_list[username].game_delivery_date_asc.remove(game_key)
                print(f"Your game '{game_list[game_key].title}' has been delivered.")
                user_list[username].games_delivered.append(game_key)
            else:
                print(f"Your game '{game_list[game_key].title}' has not been delivered yet.")
def purchase_game(user_list, game_list, username):
    game_key = input ("Enter the purchase key for the game you wish to buy\n").strip()
    if game_key in game_list: #input handling
        game = game_list[game_key]
        discount_price = game.price*(1-game.discount)
        withdrawal = user_list[username].withdraw(discount_price)
        if withdrawal != "Insufficient funds" and game.purchase() == "Purchase Successful":
            game_list[game_key].sales += 1
            print(f"You have purchased '{game.title}' for ${discount_price:.2f}.\n") # .2f makes it limited to 2 decimal points
            print(f"It will be dellivered in 3-5 business days from now.")
            order_time = time.time() 
            user_list[username].add_game(game_list, game_key)
            user_list[username].game_delivery_date[game_key] = order_time
            game_list[game_key].sales_total += discount_price
            user_list[username].game_delivery_date_asc.append(game_key)
            save_gamelist(game_list)
        else:
            print("Purchase failed due to insufficient funds or stock")
    else:
        print("Invalid game key")
class game:
    def __init__(self, game_id, title, genre, platform, price, stock, discount, publisher, release_date, description, sales, rating, sales_total):
        self.game_id = game_id
        self.title = title
        self.genre = genre
        self.platform = platform
        self.price = float(price) 
        self.stock = stock
        self.discount = discount if discount is not None else 0.0
        self.publisher = publisher
        self.release_date = release_date
        self.description = description
        self.sales = sales if sales is not None else 0
        self.rating = rating
        self.sales_total = float(sales_total)

    def change_discount(self,new_discount):
        self.discount = new_discount/100
        return self.discount

    def purchase(self):
        if self.stock >= 1:
            self.stock -= 1
            return 'Purchase Successful'
        else:
            return 'Insufficient Stock'
def save_gamelist(game_list):
    with open('game_list.txt', 'w') as game_file:
          for key in game_list:
            game = game_list[key]
            game_file.write(f"{game.game_id},{game.title},{game.genre},{game.platform}, {game.price}, {game.stock},{game.discount},{game.publisher},{game.release_date},{game.description},{game.sales},{game.rating},{game.sales_total}\n")
def make_gamelist():
        game_list = {}
        try:
            with open('C:\\Users\\zacha\\OneDrive - Catholic Education Western Australia\\Computer Science\\Project 1 Repo\\computer-sci-project-1\\game_list', 'r') as game_file:
                for lines in game_file:
                    game_id, title, genre, platform, price, stock, discount, publisher, release_date, description, sales, rating, sales_total = lines.strip().split(',')
                    old_game = game(game_id, title, genre, platform, float(price), int(stock), float(discount), publisher, release_date, description, int(sales), rating, sales_total)
                    game_list[old_game.game_id] = old_game
            return game_list
        except FileNotFoundError:
            print("No existing games found.")
def display_games(game_list):
    try:
        for key in game_list:
            print(" _______________________________________________________________________________________________________________________________")
            print (f"| {game_list[key].publisher} released {game_list[key].title} in {game_list[key].release_date} | Rating: {game_list[key].rating}/10 |")
            print (f"| The purchase key is: {game_list[key].game_id} with a ${game_list[key].price*(1-game_list[key].discount):.2f} price tag | with only {game_list[key].stock} disks left |")
            print (f"| Desctiption: {game_list[key].description}\n")
    except TypeError:
        print('An error occurred while loading the game list')
        time.sleep(1)
def display_owned_games(user_list, game_list, username):
    try:
        print("The following games have been already been delivered to you:")
        for value in user_list[username].games_delivered:
            cleaned_value = value.strip()
            if cleaned_value in game_list:
                print(f"{game_list[cleaned_value].title}")
    except:
        print("You have no games delivered")
def discount_game(game_list):
        try:
            key = input('Enter game_key to choose which game to change: ').strip()
            new_disc = int(input('Enter the new percentage sale as a full integer '))
            game_list[key].change_discount(new_disc)
        except ValueError:
            print("Please enter a correct value")
        save_gamelist(game_list)
def main_menu(user_list, username):
    game_list = make_gamelist()
    check_game_delivery(user_list, game_list, username)
    while True:
        game_list = make_gamelist()
        print("\nMain Menu Options:")
        print("a. View the game catalog")
        print("b. Place an order for the game disk")
        print("c. Update user info")
        print("d. Display the games you have")
        print("e. Save & Quit")
        
        option = input("Select an option: ").lower()
        try:
            if option == 'a':
                os.system('cls')
                display_games(game_list)
            elif option == 'b':
                purchase_game(user_list,game_list, username)
            elif option == 'c':
                os.system('cls')
                edit_user(user_list,username)
            elif option == 'd':
                display_owned_games(user_list,game_list, username)
            elif option == 'e':
                print("Exiting the main menu. Goodbye!")
                save_user(user_list)
                save_gamelist(game_list)
                break
            else:
                print("Please enter a valid option.")
        except ValueError:
            print("Enter a valid option.")
            time.sleep(1)
def gen_sales(game_list):
    for key in game_list:
        print (f"{game_list[key].title} has sold {game_list[key].sales} disks in the past since its release")
        print (f"The total sales income is ${game_list[key].sales_total}")
def gen_stock_options(game_list):
    print("a. View stock remaining")
    print("b. Change stock remaining")
    user_choice = input("\n ").lower().strip(' ')
    if user_choice == 'a':
        gen_stock_remaining(game_list)
    elif user_choice == 'b':
        game_list = change_stock(game_list)
    return game_list
def change_stock(game_list):
    try:
        key = input("Enter game_key to choose which game's stock to change")
        new_stock = input('Enter the new stock amount')
        game_list[key].stock = int(new_stock)
    except ValueError:
        print("Invalid Input. Stock must be a number")
    return game_list
def gen_stock_remaining(game_list):
    for key in game_list:
        print (f"{game_list[key].title} has {game_list[key].stock} disks left")
def orders(user_list):
    for key in user_list:
        print (f"{user_list[key].username} has {len(user_list[key].games)} game(s) in their order")
def pricing(game_list):
    for key in game_list:
        print (f"{game_list[key].title} has a price of ${game_list[key].price*(1-game_list[key].discount):.2f}")
    try:
        key = input("Enter game_key to change the price")
        new_price = input("Enter the new price")
        game_list[key].price = new_price
    except ValueError:
        print("Invalid Input. Price must be a number")
    return game_list
def gen_user_data():
    user_list = make_userlist()
    key = input("Enter username to view (type 'all' for all users)").lower()
    if key == 'all':
        for key in user_list:
            print (f"{user_list[key].username} has a balance of ${user_list[key].balance}")
            print (f"{user_list[key].username} has {len(user_list[key].games)} game(s) in their order")
            print (f"{user_list[key].username} has {user_list[key].games_delivered} game(s) delivered")
        return
    if user_list[key] == None:
        print("User does not exist")
    else:
        print (f"{user_list[key].username} has a balance of ${user_list[key].balance}")
        print (f"{user_list[key].username} has {len(user_list[key].games)} game(s) in their order")
        print (f"{user_list[key].username} has {user_list[key].games_delivered} game(s) delivered")
def admin_menu():
    while True:
        game_list = make_gamelist()
        user_list = make_userlist()
        print("\nAdmin Menu Options:")
        print("a. Generate sales report")
        print("b. Generate stock report")
        print("c. Manage current orders")
        print("d. Edit game pricing")
        print("e. View user data")
        print("f. Edit discount")
        print("g. Save & Quit")
        
        option = input("Select an option: ").lower()
        try:
            if option == 'a':
                gen_sales(game_list)
            elif option == 'b':
                game_list = gen_stock_options(game_list)
            elif option == 'c':
                orders(user_list)
            elif option == 'd':
                pricing(game_list)
            elif option == 'e':
                gen_user_data()
            elif option == 'f':
                discount_game(game_list)
            elif option == 'g':
                print("Exiting the admin menu. Goodbye!")
                break
            else:
                print("Please enter a valid option.")
            save_gamelist(game_list)
            save_user(user_list)
        except ValueError:
            print("Enter a valid option.")
def main(): 
    user_list = make_userlist()
    while True:
        validation, username, user_list = validate_user(user_list)
        if validation == True:
            main_menu(user_list, username)
        elif validation == "Admin":
            admin_menu()
        else:
            print('Username or Password is invalid')
main()